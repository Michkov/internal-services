/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package tekton

import (
	"fmt"
	"github.com/redhat-appstudio/internal-services/api/v1alpha1"
	tektonv1beta1 "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"reflect"
	"strings"
)

const (
	// internalRequestLabelPrefix is the prefix of the internal request labels
	internalRequestLabelPrefix = "internal-services.appstudio.openshift.io"
)

var (
	// InternalRequestNameLabel is the label used to specify the name of the internal request associated with the PipelineRun
	InternalRequestNameLabel = fmt.Sprintf("%s/%s", internalRequestLabelPrefix, "name")

	// InternalRequestNamespaceLabel is the label used to specify the namespace of the internal request associated with the PipelineRun
	InternalRequestNamespaceLabel = fmt.Sprintf("%s/%s", internalRequestLabelPrefix, "namespace")
)

// NewPipelineRun creates a PipelineRun for the given InternalRequest. The name will be autogenerated,
// using the name of the request as the prefix.
func NewPipelineRun(internalRequest *v1alpha1.InternalRequest) *tektonv1beta1.PipelineRun {
	pipelineRun := &tektonv1beta1.PipelineRun{
		ObjectMeta: v1.ObjectMeta{
			GenerateName: strings.ToLower(reflect.TypeOf(v1alpha1.InternalRequest{}).Name()) + "-",
			Namespace:    "default",
			Labels: map[string]string{
				InternalRequestNameLabel:      internalRequest.Name,
				InternalRequestNamespaceLabel: internalRequest.Namespace,
			},
		},
		Spec: tektonv1beta1.PipelineRunSpec{
			PipelineRef: &tektonv1beta1.PipelineRef{
				Name: internalRequest.Spec.Request,
			},
		},
	}

	appendInternalRequestParams(pipelineRun, internalRequest)

	return pipelineRun
}

// appendInternalRequestParams appends the InternalRequest parameters to the PipelineRun passed as an argument.
func appendInternalRequestParams(pipelineRun *tektonv1beta1.PipelineRun, internalRequest *v1alpha1.InternalRequest) {
	for param, value := range internalRequest.Spec.Params {
		pipelineRun.Spec.Params = append(pipelineRun.Spec.Params, tektonv1beta1.Param{
			Name: param,
			Value: tektonv1beta1.ArrayOrString{
				Type:      tektonv1beta1.ParamTypeString,
				StringVal: value,
			},
		})
	}
}
